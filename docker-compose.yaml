services:
  db:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  mosquitto:
    container_name: mosquitto
    build: ./mosquitto
    restart: unless-stopped
    ports:
      - "1883:1883/tcp"
    environment:
      - TZ=Europe/Moscow
      - MQTT_USER=${MQTT_USER}
      - MQTT_PASS=${MQTT_PASS}
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
    stdin_open: true
    tty: true
    command: sh -c "/mosquitto-initialize.sh ${MQTT_USER} ${MQTT_PASS} && exec mosquitto -c /mosquitto/config/mosquitto.conf"

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  control-system:
    container_name: control-system
    build: ./control-system
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_HOST=db
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=${MQTT_PORT}
      - MQTT_USER=${MQTT_USER}
      - MQTT_PASS=${MQTT_PASS}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
    ports:
      - "8000:8000"
    #    volumes:
    #      - ./control-system:/app
    develop:
      watch:
        - action: sync+restart
          path: control-system/
          target: /app

  # frontend:
  #   container_name: frontend-conteiner
  #   build: ./frontend
  #   volumes:
  #     - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf
  #   restart: unless-stopped
  #   ports:
  #     - "8080:8080"

volumes:
  postgres_data:
  redis_data:
